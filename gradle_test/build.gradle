apply plugin: 'java'
apply plugin: 'maven-publish'

// should be able to remove these when the artifactory cert gets updated
System.setProperty('javax.net.ssl.trustStore', 'cacerts')
System.setProperty('javax.net.ssl.trustStorePassword', 'changeit')

apply from: new File('dependencies.gradle')
apply from: new File('secrets.gradle')

if(!project.hasProperty('gitHost')){
    throw new GradleException('gitHost must be defined as an input parameter. E.g. -PgitHost=github.ibm.com')
}

import groovy.io.FileType

String getLib(String filename) {
    def files = []
    new File('lib').eachFileMatch(FileType.FILES, ~/${filename}\..*/, { files << it.name } )
    if ( files.isEmpty() ) {
        println "Could not find a file matching ${filename}.*"
        throw new GradleException("Could not find a file matching ${filename}.*")
    }
    return files[0]
}

task createRepo {
    def result = exec {
        commandLine 'curl', '-u', "yogeshrnaik:${token}",
                'https://api.github.com/user/repos', '-d', '{"name":"my_test_repo", "auto_init": true}'
    }
    if (result.getExitValue() != 0) {
        throw new GradleException('The git create repo failed: ' + result)
    } else {
        System.out.println('The git create repo successful: ' + result)
    }
}

//task deleteRepo {
//    def result = exec {
//        commandLine 'curl', '-u', 'yogeshrnaik:<TOKEN_HERE>',
//                '-X', 'DELETE', 'https://api.github.com/repos/yogeshrnaik/my_test_repo'
//    }
//    if (result.getExitValue() != 0) {
//        throw new GradleException('The git delete repo failed: ' + result)
//    } else {
//        System.out.println('The git delete repo successful: ' + result)
//    }
//}

task loadGitRepos {
    doLast {
        gitRepos.each { repo ->
            def repoDir = repo.split('/')[-1].replace('.git', '')
            delete "repos/${repoDir}/.git"
            exec {
                commandLine 'git', 'init'
                workingDir "repos/${repoDir}"
            }
            exec {
                commandLine 'git', 'remote', 'add', 'origin', "git@${gitHost}:${repo}"
                workingDir "repos/${repoDir}"
            }
            exec {
                commandLine 'git', 'add', '--all'
                workingDir "repos/${repoDir}"
            }
            new ByteArrayOutputStream().withStream { os ->
                def result = exec {
                    commandLine 'git', 'commit', '-m', 'code drop '+ new Date().format('yyyy/MMM/dd HH:mm')
                    workingDir "repos/${repoDir}"
                    ignoreExitValue true
                    standardOutput = os
                }
                if(result.getExitValue() != 0 && !os.toString().contains('nothing to commit, working tree clean')){
                    throw new GradleException('The git commit failed: '+os.toString())
                } else if(result.getExitValue() == 0 ){
                    exec {
                        commandLine 'git', 'push', '-f', '-u', 'origin', 'master'
                        workingDir "repos/${repoDir}"
                    }
                }
            }
        }
    }
}