apply plugin: 'java'
apply plugin: 'maven-publish'

// should be able to remove these when the artifactory cert gets updated
System.setProperty('javax.net.ssl.trustStore', 'cacerts')
System.setProperty('javax.net.ssl.trustStorePassword', 'changeit')

apply from: new File('dependencies.gradle')

if (!project.hasProperty('gitHost')) {
    throw new GradleException('gitHost must be defined as an input parameter. E.g. -PgitHost=github.ibm.com')
}


import groovy.io.FileType

String getLib(String filename) {
    def files = []
    new File('lib').eachFileMatch(FileType.FILES, ~/${filename}\..*/, { files << it.name })
    if (files.isEmpty()) {
        println "Could not find a file matching ${filename}.*"
        throw new GradleException("Could not find a file matching ${filename}.*")
    }
    return files[0]
}

boolean checkIfMasterBranchExists(String repoName) {
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            commandLine 'git', 'ls-remote', '--heads', "git@${gitHost}:${gitUser}/${repoName}.git", 'master'
            ignoreExitValue true
            standardOutput = os
        }
        if (result.getExitValue() != 0) {
            throw new GradleException("Could not check if master branch exists for repo ${repoName}. Result = " + result)
        }
        return result.getExitValue() == 0 && os.toString().contains("master")
    }
}

void createReadMe(String repoName, String filePath) {
    println("creating readme")
    BufferedWriter w = null
    try {
        File file = new File(filePath)
        if (file.exists()) {
            println("file exists " + filePath)
            return
        }
        w = new BufferedWriter(new FileWriter(file))
        w.writeLine("# " + repoName)
        w.flush()
    } catch (IOException io) {
        // ignore
        throw new GradleException("", io)
    } finally {
        if (w != null) {
            try {
                w.close()
            } catch (IOException io) {
                // ignore
            }
        }
    }
}

void createMasterBranch(String repoName) {
    createReadMe(repoName, "./repos/README.md")
    exec {
        commandLine "git", "init"
        workingDir "repos/"
    }
    exec {
        commandLine "git", "add", "README.md"
        workingDir "repos/"
    }
    exec {
        commandLine "git", "commit", "-m", '"first commit"'
        workingDir "repos/"
    }
    exec {
        commandLine "git", "remote", "add", "origin", "git@${gitHost}:${gitUser}/${repoName}.git"
        workingDir "repos/"
    }
    exec {
        commandLine "git", "push", "-u", "origin", "master"
        workingDir "repos/"
    }
}

task loadGitRepos {
    doLast {
        if (!checkIfMasterBranchExists("test")) {
            // create master branch as it does not exist
            println("master branch do not exists for test repo")
            createMasterBranch("test")
        }
        gitRepos.each { repo ->
            def repoDir = repo.split('/')[-1].replace('.git', '')
            delete "repos/${repoDir}/.git"
            exec {
                commandLine 'git', 'init'
                workingDir "repos/${repoDir}"
            }
            exec {
                commandLine 'git', 'remote', 'add', 'origin', "git@${gitHost}:${repo}"
                workingDir "repos/${repoDir}"
            }
            exec {
                commandLine 'git', 'add', '--all'
                workingDir "repos/${repoDir}"
            }
            new ByteArrayOutputStream().withStream { os ->
                def result = exec {
                    commandLine 'git', 'commit', '-m', 'code drop ' + new Date().format('yyyy/MMM/dd HH:mm')
                    workingDir "repos/${repoDir}"
                    ignoreExitValue true
                    standardOutput = os
                }
                if (result.getExitValue() != 0 && !os.toString().contains('nothing to commit, working tree clean')) {
                    throw new GradleException('The git commit failed: ' + os.toString())
                } else if (result.getExitValue() == 0) {
                    exec {
                        commandLine 'git', 'push', '-f', '-u', 'origin', 'master'
                        workingDir "repos/${repoDir}"
                    }
                }
            }
        }
    }
}